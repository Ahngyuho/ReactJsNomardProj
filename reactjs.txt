리액트를 사용하는 이유에 대해 일단 알아보자
어떤 문제를 해결하려고 등장
ui를 interactivity(상호작용)하도록 웹사이트와 도와줌
이걸 위해 등장 

js로 웹으로 뭔가를 만드려고 함
버튼을 만들고 그 버튼을 클릭한 수를 세고 싶으면
js로는 많은 일들을 해야함 
리액트가 이러한 일들을 대신 해준다

2.1
버튼 클릭 수를 세는 프로그램

<body>
    <button id = "btn">Click me</button>
</body>

이렇게 button을 만들고

<script>
    const button = document.querySelector("btn");
</script>
이런식으로 바로 js코드를 넣어줄 수 있음

<script>
    let counter = 0;
    const button = document.getElementById("btn");
    const span = document.querySelector("span");
    function handleClick(){
        counter = counter + 1;
        span.innerText = `Total click ${counter}`;
    }
    button.addEventListener("click",handleClick);
</script>

이런 식의 코드를 계속 작성해야함

하지만 더 나은 방법이 존재함

react를 사용하자 그전에 설치해야함
js 코드 import

<script src="https://unpkg.com/react@17/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
이거 import해줌

이제 js로 이 애플리케이션을 만들어  볼 것임

2.2
React js element를 어떻게 생성하는지 보자
React js 의 규칙 중 하나는 html을 해당 페이지에
직접 작성하지 않음
span button 이런걸 js 코드로 대체할 것임 html코드를 
직접 작성하지 않고 react js를 통해 element를 만들어 낼 것임
매우 유용

일단 어려운 방식부터 해보자


<script>
    const span = React.createElement("span");
    이렇게 생성하고자 하는 element를 적어주는것
</script>

아직 body에 span이 생기진 않았지만 우선 span은 생성됨
React js가 html을 대신 작성해 줄 것임

React JS - 어플리케이션이 아주 인터랙티브하도록 만들어주는 library. 엔진과 같다.
React-dom - library 또는 package. 모든 react element들을 HTML body에 둘 수 있도록 해줌.
ReactDOM.render() - render의 의미는 react element를 가지고 HTML로 만들어 배치한다는 것. 즉, 사용자에게 보여준다는 의미
ReactDOM.render(span, span이 가야할 위치)
-> 그래서 보통 body에 id=“root” 만들어서 span을 root 안에 두라고 함

<div id = "roor"></div>
const root = document.getElementById("root");
ReactDOM.render(span,where : root) React element를 가지고 html로 만들어 배치함

const span = React.createElement("span",{property})
이 createElement의 두번째 매개변수로 해당 element의 property를 줄 수 있다.
const span = React.createElement("span",{id:"sexy-span"});

<div id="root"><span id="sexy-span"></span></div>
이렇게 들어가게 된다

ReactJs는 js를 이용해 element들을 생성하고 
그걸 ReactJs가 html로 번역하는 것임

2.3
두 가지 const를 render 하고 싶은 경우 div를 만든다
그리고 React.createElement("div", null, [span, btn]); 와 같이 배열을 만들어서 const를 넣어준다.

property에 eventListener 넣는 것도 가능.
클릭 - {onClick: () => console.log("I'm clicked")}
마우스엔터 - {onMouseEnter: () => console.log("mouse enter")}

addEventListener 를 하지 않아도 property에 추가해서
사용할 수 있음

const h3 = React.createElement("h3",{
        id : "title",
        onMouseEnter: () => console.log("mouse enter"),
    },"Hello I'm a h3");

이렇게 여러개의 property를 설정가능하다는 것
on + event 는 eventListener 임을 ReactJs가 알고있음

const btn = React.createElement("button",{
        onClick: ()  => console.log("im clicked"),
        style : {
            backgroundColor: "tomato",
        }
    },"Click me");
style도 넣을 수 있다. 3번째는 content 매개변수

2.4
정리
1.ReactJs ReactDOM
ReactJs는 element들을 생성하고 eventListener를 
더해주는 것을 도와줌
ReactJs는 interactivity의 원동력임
ReactDOM은 element들을 HTML로 바꿔줌

ReactDOM.render(element,element)
첫번째 element들을 두번째 element에 보여줘라

근데 이제 이 방식으로 쓰진 않을 것

element에는 eventListener를 달아야 함
ReactJs는 addEventListener 할 필요 없고 createElement의
두번쨰 매개변수가 property를 받으므로 여기에 on+event를 통해
해당 element에 addEventListener 를 해주는 것이다.
이 두번째 매개변수에는 style,id,eventListener등등 올 수 있다.
하지만 더 쉬운 React element 생성법이 있다.
 const container = React.createElement("div",null,[h3,btn]);

 이렇게 세번째에 array형태로 줘서 해당 element에 여러 element들을
 render 할 수 있음

2.5
JSX

좀 더 편리하게 element를 만들자
jsx는 js를 좀 더 확장한 것
jsx로 React요소를 만듦

바벨이라는 것을 이용해서 jsx로 만든 코드를
브라우저가 이해하는 형태로 바꿔주는 것
이걸 추가해야 함
https://unpkg.com/@babel/standalone/babel.min.js
const Title = (
            <h3 id="title" onMouseEnter={() => console.log("mouse enter")}>
            Hello I'm a title
        </h3>
이런식으로 property를 HTML 태그의 속성처럼 적어주면 된다.

2.6
const container = React.createElement("div",null,[Title,Button]);
이제 이 표현을 jsx형태로 바꿔보자

const Container = <div> Title Button
        </div>;
    ReactDOM.render(container,root);

하지만 이렇게만 해서는 안됨 함수를 만들어서 넣어줘야함

이건 function Button(){ return ... } 과 동일함
항상 jsx를 return 해줘야 함 이게 jsx를 return해주는
함수가 되는 것임
이걸 arraw function 이라고 함
const Button =() => (
        <button style={{
            backgroundColor: "tomato",
        }
        }
        onClick = {() => console.log("im clicked")}>
            Click me
        </button>
    );

const Container = <div> <Title /><Button />
        </div>;
이런식으로 해주면 된다. Title 함수가 마치 HTML 태그인 것처럼
이 컴포넌트의 첫글자는 항상 대문자여야 함 그래서 Title
Button 이렇게 첫글자를 대문자로 써준이유
이런 컴포넌트 요소 즉 Title = h3 Button = button
이렇게 직접 만들어 줄 때는 항상 const 첫글자 대문자
이런식으로 만들어 줘야함
const Container = () => <div> <Title /><Button />
        </div>;
    ReactDOM.render(<Container/>,root);

이렇게 함수로 만들어서 넣어주기 가능

3.0
React.js의 state에 대해 배워보자
state는 기본적으로 데이터가 저장되는 곳
React element를 함수 내에 담으면 원하는 만큼 사용 가능
<Title/>
코드 재사용

const Container = () =>(
        <div>
            <h3>Total click : 0 </h3>
            <button>Click me</button>    
        </div>
    );
이렇게도 만들 수 있음

var Container = function Container() {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "Total click : 0 "), /*#__PURE__*/React.createElement("button", null, "Click me"));
};

바벨에 의해 jsx가 이런식으로 번역되는 것임

const Container = () =>(
        <div>
            <h3>Total click : {counter} </h3>
            jsx에서는 이런식으로 변수값을 띄워줄 수 있음
            <button onClick={countUp}>Click me</button>    
        </div>
    );

jsx에서는 html 태그 옆에 property를 추가가능했다
<button onClick={countUp}
function countUp(){
        counter += counter + 1;
    }

하지만 counter가 올라가기는 하는데 html상에서는 숫자가 올라가지 않음
그 이유는 처음에 함수는 호출해야 실행되므로 먼저 실행되지 않고
ReactDOM.render() 이 함수가 호출됨 그러면서 Container가 실행되는데
이게 처음 실행될 때 counter은 0임 React가 element로 렌더링하고 root에 담아주는데
그때 렌더링 된 counter는 0임
그리고 button을 누를 때 마다 counter은 올라가는데
올라가고 나서 렌더링을 해주지 않고 있음 ReactDOM은 마지막에
딱 한번 실행되고 더 이상 실행되지 않음 이게 html로 렌더링
해줘야 하는데 그렇지 않고 있음

function countUp(){
        counter += counter + 1;
        ReactDOM.render(<Container />,root);
    }
이렇게 클릭 될 때 실행되는 함수에 이렇게 넣어주면 된다.

function render(){
        ReactDOM.render(<Container />,root);
    }
중복돼서 사용되니 함수로 만들어 사용하자

하지만 더 쉬운 방법이 있음

근데 보면 오직 바뀐 부분만 업데이트 되고 있음

브라우저에서 확인해보면 counter만 계속 바뀌고 있고
나머지 h3 이런건 바뀌지 않음 
ReactDOM.render(Contatiner)
Container안에 모든 요소들이 동일해도 계속 바뀔 줄 알았으나
react가 바뀐 부분만 업데이트 해줌
엄청난 장점 여러가지 요소들을 리렌더링 해주려고 해도
전부다 새로 생성되지는 않는 것임 오로지 바뀐부분만 리렌더링

3.1
리렌더링을 하는 더 좋은 방법이 있음

const App(){
        const data = React.useState();
        //이걸 통해 data와 함수를 얻을 수 있음
        //함수는 data를  바꿀 때 사용하는 함수임
        //이게 function countUp() 과 let counter = 0;
        //을 대체하는 것임
        console.log(data);
        return(
            <div>
            <h3>Total click :0</h3>
            <button>Click me</button>    
        </div>
        );
    }
const [counter,modifier] = React.useState(0);
이렇게 const counter = useState[0] 
이런식으로 js가 제공하는 문법이 존재함
const counter = data[0]
const modifier = data[1] 
이런식으로 짜지 않아도 됨

3.2
React.useState(data);
이건 배열을 반환해줌
하나는 data와 data 값을 변경하는 함수
modifier임
왜 modifier가 필요할까?

이 modifier에 매개변수로 값을 넣어주면
data값이 그 값으로 바뀌면서 리렌더링됨
const onClick = () =>{
            modifier(counter+1);
        }

3.3
정리
데이터가 바뀔때마다 해당 컴포넌트를 리렌더링
바뀌는 컴포넌트만 바뀜 reactjs의 장점

3.4
state 즉 counter를  바꾸는 방법이 2가지 있음
하나는 앞서 배운 방법이고

이전값을 기준으로 값을 바꾸고 싶다면
이 state의 두번째 매개변수인 함수에는
const onClick = () =>{
            //setCounter(counter+1);
            setCounter(current => current + 1);
        }
매개변수에 숫자도 들어갈 수 있으나
함수도 들어갈 수 있다.
이 함수의 첫번째 매개변수는 현재의 값이다
이 함수의 return 값이 새로운 state가 되는 것
이게 더 안전함
이렇게 함수를 이용해서 매개변수를 주면 
리액트가 확실히 이 값이(current) 현재 값이라는 걸 보장함
더 정확히 계산 가능
이제 state를 기반으로 계산하고 싶으면 이렇게 함수를 이용하자

정리
state 값을 설정하는 방법
setCounter(counter + 1) 직접 값 설정
setCounter((current) => current + 1)
함수 전달하기 이 current함수가 현재 state값을 얻도록 해줌

3.5
단위 변환 앱 만들어보기

html에서 label을 사용하면 input과 연결가능
input은 id를 가져야하고 label은 for 속성을 이용해
input과 연결
<label for ="minutes">Minutes</label>
<input id="minutes" placeholder="Minutes" type="number"/>
이 label을 선택하면 해당 input에 입력가능하도록 커서가 생김

사실 for를 쓰면 안됨 jsx에서는
for는 js 용어임 이미 js에서 사용하고 있는 문법언어?
class도  넣어보면 에러 생김
jsx를 쓰고있을 때는 이런점을 주의해야함
class for을 쓰면 안됨
class => className for=>htmlFor

아직 이 input의 value를 reactjs로 얻어내는 방법을 배우지 않음
ReactJs에서는 input의 value가 uncontrolled라고 알려짐

onChange는 input의 변화를 감지함
이 eventListener의 event 매개변수안에
이 input의 value를 추적할 수 있음
event.target.value
이게 reactjs에서 form을 다루는 방법임


3.6
정리
React.useState()
default = 0

const onChange = (event)=>{
            setMinutes(event.target.value);
            input값이 바뀌고 그 값을 value안에 넣는것
            즉 input스스로 값이 변경되는 것
        }
        return(
            <>
                <h1>super Converter</h1>
                <label for ="minutes">Minutes</label>
                <input value={minutes}
                이렇게 value와 값을 연결시켜준이유는 
                input을 외부와 연결하기 위함
                 id="minutes" 
                 placeholder="Minutes" 
                 type="number"
                 onChange={onChange} input가 바뀌면 발생
                 />

<label for="hours">Hours</label>
<input value={minutes/60} id='hours' placeholder="Hours" type="number" />

이렇게 해주면 된다 이건 리렌더링 되는게 아님

<div>
    <button onClick={reset}>Reset</button>
</div>
const reset = () =>{
            setMinutes(0);
        }
이렇게 하면 리렌더링 되는 것임

3.7
flip버튼

const [flipped,setFlipped] = React.useState();
새로운 state생성
<button onClick={onFlip}>Flipped</button>
플립버튼 생성
const onFlip = () => setFlipped(!flipped);

하지만 이건 함수를 사용하지 않고 직접 값을 변경하는 것임
함수를 넣어서 해줘야 정확함

const onFlip = () => setFlipped(current => !current);

<label for="hours">Hours</label>
                    <input value={Math.round(minutes/60)} 
                    id='hours' placeholder="Hours" 
                    type="number" 
                    disabled={flipped === false}/>
hour에 disabled = {flipped === false}추가해주자
disabled={flipped === true}
minutes에는 이거 추가 그러면 번갈아 적용됨

flip
const onFlip = () => setFlipped(!flipped);
-> flipped가 true라면 부정명제인 !flipped는 false
-> false라면 true

state값으로 input을 enabled할지 disabled 할지를 결정할 수 있음

디폴트 값이 false 라고 정했으므로 Hours는 disabled 되어야함
그래서 disabled={flipped === false}를 써줘서
flipped가 false라면, disabled는 true가 되도록 만들어줌
Minuets에는 반대로
disabled={flipped === true}라고 써줌
그러나
Hours는
disabled={!flipped}
Minuets에는 반대로
disabled={flipped}
주는게 더 짧고 좋음

시간 -> 분 컨버터
삼항연산자(ternary operator) 사용하기
flipped ? amount : amount / 60
-> 만약 flipped 상태면 state에 있는 값을 그대로 보여주기
아니라면 60으로 나눈 변환된 값 보여주기
value={flipped ? amount * 60 : amount}
-> 만약 flipped 상태면 60으로 곱한 변환된 값 보여주기
아니라면 state에 있는 값을 그대로 보여주기

flip누르면 변화된 값 그대로 가져오므로
onFlip 변수에 reset(); 넣어주기

3.8
정리
const [amount,setAmount] = React.useState();
const [flipped,setFlipped] = React.useState();
state 두개 추가
filp는 시 => 분 분 => 시
바꾸기 위함

onChange={onChange}
input의 값이 바뀌면 실행되는 eventListener이다

const onChange = (event)=>{
            setAmount(event.target.value);
        }
input에 입력된 값을 추적해서 그 값을 amount에 넣는 것

state를 통해 UI를 변경한 것임

3.9
코드 챌린지

function MinutesToHours(){...}
    const root = document.getElementById("root");
    
    function App(){
        return(
            <div>
                <h1>Super Converter</h1>
                <MinutesToHours/>
            </div>
        );
    }
        

    ReactDOM.render(<App />,root);

이런식으로 컴포넌트안에 컴포넌트를 넣자
다른 컴포넌트도 만들어보자
{안에 js코드를 넣을 수 있다.}
아 state를 변화시키면 모든게 새로고침됨
그러면서 reactjs가 re-render에 필요한 것들을
re-render해줌